#!/usr/bin/env python
"""
Utility to generate a encrypted version of the credentials, in order to avoid storing them in plain text
"""
import getpass
import hashlib
import os
import uuid

import pymputator.settings as settings

def hash_password(password):
    """
    Hashes a password
    """
    # uuid is used to generate a random number
    salt = uuid.uuid4().hex
    return hashlib.sha256(salt.encode() + password.encode()).hexdigest() + ':' + salt

def check_password(hashed_password, user_password):
    """
    Checks if a hashed_password is the same as a plain text password given
    """
    password, salt = hashed_password.split(':')
    return password == hashlib.sha256(salt.encode() + user_password.encode()).hexdigest()

def _input(input_string):
    """
    An input / raw_input wrapper, used to be compatible with both python 2 and 3
    :param input_string: The argument to input / raw_input

    :return response: The response given by the user
    :rtype: string
    """
    try:
        response = raw_input(input_string)
    except NameError:
        response = input(input_string)
    return response

def write_credentials(file_name, credentials):
    folder = os.path.dirname(os.path.abspath(file_name))
    if not os.path.exists(folder):
        os.makedirs(folder)
    with open(file_name, 'w') as f:
        f.write(credentials)


if __name__ == '__main__':

    new_pass = getpass.getpass('Please enter a password: ')
    hashed_password = hash_password(new_pass)

    old_pass = getpass.getpass('Now please enter the password again to check: ')
    if check_password(hashed_password, old_pass):
        write_credentials(settings.USER_CFG_FILE, hashed_password)
    else:
        print('Passwords don\'t match')


